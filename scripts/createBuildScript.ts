import * as fs from 'fs';
import path from 'path';

import yaml from 'js-yaml';

interface Workflow {
    jobs: {
        build: {
            steps: { name: string; run?: string; id?: string }[];
        };
    };
}

const excludedSteps = ['yarn_cache_dir', 'env', 'git_prepare', 'output'];
const shortcuts = {
    dependencies: ['yarn_setup', 'versions', 'yarn_install', 'browserslist'],
    quick: ['json_yaml_format', 'eslint', 'tsc', 'webpack'],
    full: [],
};

const script = [
    `#!/usr/bin/env bash
# DO NOT EDIT THIS FILE AS IT IS AUTOGENERATED!`,
];

try {
    const doc = yaml.load(
        fs.readFileSync(
            path.join(__dirname, '..', '.github', 'workflows', 'build.yml'),
            'utf8'
        )
    ) as Workflow;

    const steps = doc.jobs.build.steps.filter(
        step => step.run && !excludedSteps.includes(step.id ?? '')
    );
    const stepIds = steps.map(step => step.id ?? '');

    script.push(
        `
# default values of variables set from params
${stepIds.map(id => `${id.toUpperCase()}=false`).join('\n')}
MODE="development"

while :; do
    case "\${1-}" in
${stepIds.map(id => `        --${id}) ${id.toUpperCase()}=true ;;`).join('\n')}
${Object.entries(shortcuts)
    .map(
        ([shortcut, steps]) => `        --${shortcut})
          ${(shortcut === 'full' ? stepIds : steps)
              .map(step => `${step.toUpperCase()}=true`)
              .join('\n          ')} ;;`
    )
    .join('\n')}
        -p | --production) MODE="production" ;;
        -?*)
          echo "Unknown option: $1"
          exit 1 ;;
        *) break ;;
    esac
    shift
done`,
        'total_start_time=$(date +%s%N)',
        ...steps.map(step =>
            [
                `# ${step.name}`,
                `if [[ $${step.id?.toUpperCase()} = true ]]; then
    start_time=$(date +%s%N)
    echo "### ${step.name} ###"
    ${
        step.run
            ?.trim()
            .replace(/\n/gu, '\n    ')
            .replace(/\$\{\{ env\.MODE \}\}/u, '$MODE') ?? ''
    }
    end_time=$(date +%s%N)
    echo "=== ${step.name}: $(((end_time - start_time) / 1000000))ms ==="
fi`,
            ].join('\n')
        ),
        'total_end_time=$(date +%s%N)',
        'echo "=== Total: $(((total_end_time - total_start_time) / 1000000))ms ==="'
    );

    const scriptPath = path.join(__dirname, '..', 'build', 'build.sh');

    fs.writeFileSync(scriptPath, script.join('\n\n'));
    fs.chmodSync(scriptPath, 0o755);
} catch (e) {
    console.log(e);
}
